extends LeafAction

var working_map: Imap = null
var radius: int = 0

func tick(agent: Ship, blackboard: Blackboard) -> int:
	if agent.combat_flag == false and Engine.get_physics_frames() % 67 != 0:
		return FAILURE
	
	if agent.fallback_flag == true and agent.vent_flux_flag == true:
		return FAILURE
	
	if working_map == null:
		radius = agent.template_maps[imap_manager.MapType.OCCUPANCY_MAP].width / 2
		working_map = Imap.new(radius, radius)
	
	imap_manager.vulnerability_map.add_into_map(working_map, agent.imap_cell.y, agent.imap_cell.x)
	var vulnerability: float = 0.0
	var safe_cells: Dictionary = {}
	for m in range(radius):
		var row: Array = working_map.map_grid[m]
		var row_max: float = row.max()
		var row_min: float = row.min()
		if row_max > 0.0:
			vulnerability += row_max
		if row_min < 0.0:
			vulnerability += row_min
		for n in range(radius):
			var cell_value: float = working_map.map_grid[m][n]
			if cell_value < 0.0:
				var cell: Vector2i = Vector2i(agent.imap_cell.x + m, agent.imap_cell.y + n)
				var cell_pos: Vector2 = Vector2(cell.y * imap_manager.default_cell_size, cell.x * imap_manager.default_cell_size)
				safe_cells[cell] = cell_pos
	
	if vulnerability < 1.0 and agent.fallback_flag == true:
		agent.fallback_flag = false
	
	if vulnerability < 1.0:
		return FAILURE
	
	if vulnerability > 1.0 and agent.fallback_flag == false:
		agent.fallback_flag = true
	
	var friendly_pos: Array = []
	var enemy_pos: Array = []
	for unit in agent.neighbor_units:
		if unit == null:
			continue
		if unit.is_friendly == agent.is_friendly:
			friendly_pos.append(unit.global_position)
		elif unit.is_friendly != agent.is_friendly:
			enemy_pos.append(unit.global_position)
	
	var friendly_gm: Vector2 = Vector2.ZERO
	if friendly_pos.size() > 1:
		friendly_gm = globals.geometric_median_of_objects(friendly_pos)
	elif friendly_pos.size() == 1:
		friendly_gm = friendly_pos[0]
	
	#var enemy_gm: Vector2 = Vector2.ZERO
	#if enemy_pos.size() > 1:
		#enemy_gm = globals.geometric_median_of_objects(enemy_pos)
	#elif enemy_pos.size() == 1:
		#enemy_gm = enemy_pos[0]
	
	var safe_pos_dist: Dictionary = {}
	for cell in safe_cells:
		var position: Vector2 = safe_cells[cell]
		var dist_to: float = agent.global_position.distance_squared_to(position)
		if friendly_gm != Vector2.ZERO:
			dist_to = friendly_gm.distance_squared_to(position)
		safe_pos_dist[dist_to] = position
	
	var safest_position: Vector2 = Vector2.ZERO
	
	if safe_pos_dist.is_empty() == false:
		safest_position = safe_pos_dist[safe_pos_dist.keys().min()]
	elif friendly_gm != Vector2.ZERO:
		safest_position = friendly_gm
	
	if agent.target_unit != null:
		agent.target_unit.targeted_by.erase(agent)
		agent.target_unit = null
		agent.set_target_for_weapons(null)
	
	agent.move_direction = agent.global_position.direction_to(safest_position)
	return FAILURE
